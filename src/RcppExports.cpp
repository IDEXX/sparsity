// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// createProblemInstance
SEXP createProblemInstance(Eigen::MappedSparseMatrix<double> inputMatrix, std::vector<double> labels);
RcppExport SEXP sparsity_createProblemInstance(SEXP inputMatrixSEXP, SEXP labelsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Eigen::MappedSparseMatrix<double> inputMatrix = Rcpp::as<Eigen::MappedSparseMatrix<double> >(inputMatrixSEXP);
    std::vector<double> labels = Rcpp::as<std::vector<double> >(labelsSEXP);
    SEXP __result = createProblemInstance(inputMatrix, labels);
    return Rcpp::wrap(__result);
END_RCPP
}
// liblinearTrain
List liblinearTrain(SEXP problemPtr, int solver_type, double cost, double epsilon, bool quiet);
RcppExport SEXP sparsity_liblinearTrain(SEXP problemPtrSEXP, SEXP solver_typeSEXP, SEXP costSEXP, SEXP epsilonSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    SEXP problemPtr = Rcpp::as<SEXP >(problemPtrSEXP);
    int solver_type = Rcpp::as<int >(solver_typeSEXP);
    double cost = Rcpp::as<double >(costSEXP);
    double epsilon = Rcpp::as<double >(epsilonSEXP);
    bool quiet = Rcpp::as<bool >(quietSEXP);
    List __result = liblinearTrain(problemPtr, solver_type, cost, epsilon, quiet);
    return Rcpp::wrap(__result);
END_RCPP
}
// readSvmLight
List readSvmLight(std::string filename);
RcppExport SEXP sparsity_readSvmLight(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::string filename = Rcpp::as<std::string >(filenameSEXP);
    List __result = readSvmLight(filename);
    return Rcpp::wrap(__result);
END_RCPP
}
// writeSvmLight
List writeSvmLight(Eigen::MappedSparseMatrix<double> inputMatrix, NumericVector labels, std::string fileName);
RcppExport SEXP sparsity_writeSvmLight(SEXP inputMatrixSEXP, SEXP labelsSEXP, SEXP fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Eigen::MappedSparseMatrix<double> inputMatrix = Rcpp::as<Eigen::MappedSparseMatrix<double> >(inputMatrixSEXP);
    NumericVector labels = Rcpp::as<NumericVector >(labelsSEXP);
    std::string fileName = Rcpp::as<std::string >(fileNameSEXP);
    List __result = writeSvmLight(inputMatrix, labels, fileName);
    return Rcpp::wrap(__result);
END_RCPP
}
